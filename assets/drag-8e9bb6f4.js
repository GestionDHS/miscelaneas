import{P as c}from"./pg-event-f7ab3da9.js";class m{constructor(e){if(!e.base||!e.base.element||!e.categories||!e.verifyButton)throw new Error("Invalid configuration: base, categories, and verifyButton are required.");this.base=e.base,this.categories=e.categories,this.onChange=e.onChange,this.messages=e.messages,e.verifyButton.addEventListener("click",()=>this.validateItems()),this.initDraggableItems(),this.initCategories(),this.initBase()}initDraggableItems(){this.base.items.forEach((e,n)=>{if(!e.element){console.error("Invalid item element",e);return}e.element.setAttribute("draggable",!0),e.element.classList.add("item"),e.element.dataset.itemId=`item-${n}`,e.element.addEventListener("dragstart",t=>{t.dataTransfer.setData("text/plain",e.element.dataset.itemId)})})}initCategories(){this.categories.forEach(e=>{if(!e.element){console.error("Invalid category element",e);return}e.element.addEventListener("dragover",n=>{n.preventDefault()}),e.element.addEventListener("drop",n=>{n.preventDefault();const t=n.dataTransfer.getData("text/plain");if(!t){console.error("No data received on drop event");return}const s=document.querySelector(`[data-item-id="${t}"]`);s?(e.element.appendChild(s),this.updateState()):console.warn("Dragged element not found.")})})}initBase(){this.base.element.addEventListener("dragover",e=>{e.preventDefault()}),this.base.element.addEventListener("drop",e=>{e.preventDefault();const n=e.dataTransfer.getData("text/plain");if(!n){console.error("No data received on drop event");return}const t=document.querySelector(`[data-item-id="${n}"]`);t?(this.base.element.appendChild(t),this.updateState()):console.warn("Dragged element not found.")})}validateItems(){let e=!0;this.categories.forEach(t=>{Array.from(t.element.querySelectorAll(".item")).forEach(s=>{const o=this.base.items.find(i=>i.element===s);o?o.expectedCategory!==t.name&&(e=!1):(console.error("Unable to validate item: Missing reference.",s),e=!1)})}),Array.from(this.base.element.querySelectorAll(".item")).forEach(t=>{const s=this.base.items.find(o=>o.element===t);s?s.expectedCategory!=="base"&&(e=!1):(console.error("Unable to validate item: Missing reference.",t),e=!1)}),new c().postToPg({event:e?"SUCCESS":"FAILURE",message:e?this.messages.onSuccess:this.messages.onFail,reasons:[],state:JSON.stringify({})})}updateState(){const e=Array.from(this.base.element.querySelectorAll(".item")),n=this.categories.map(t=>({name:t.name,items:Array.from(t.element.querySelectorAll(".item"))}));this.onChange&&this.onChange(e,n)}}class d{constructor(e){this.categories=e.categories,this.expectations=e.expectations,this.connectorColor=e.connector.color||"#000000",this.connectorWidth=e.connector.width||2,this.connectorRadius=e.connector.radius||5,this.onChange=e.onChange,this.connectorsContainer=e.connector.container,this.messages=e.messages,this.connectorsContainer.innerHTML="",this.relations={},this.connectorIdCounter=0,this.initItems(),this.setupDraggableItems(),this.verifyButton=e.verifyButton,this.verifyButton.addEventListener("click",()=>this.validateConnections())}initItems(){this.categories.forEach(e=>{e.items.forEach(n=>{n.element&&n.element.addEventListener("mousedown",t=>this.onItemDragStart(t,n))})})}setupDraggableItems(){this.connector=null,this.startItem=null,document.addEventListener("mousemove",e=>{if(this.connector){const n=e.clientX,t=e.clientY;this.updateConnectorPosition(n,t)}}),document.addEventListener("mouseup",()=>{this.connector&&this.finalizeConnector()})}onItemDragStart(e,n){e.preventDefault(),this.startItem=n;const t=e.clientX,s=e.clientY;this.connector=document.createElement("div");const o=`connector-${this.connectorIdCounter++}`;this.connector.id=o,this.connector.style.position="absolute",this.connector.style.left=`${t}px`,this.connector.style.top=`${s}px`,this.connector.style.width=`${this.connectorWidth}px`,this.connector.style.height=`${this.connectorWidth}px`,this.connector.style.backgroundColor=this.connectorColor,this.connector.style.borderRadius=`${this.connectorRadius}px`,this.connector.style.cursor="pointer",this.connector.style.pointerEvents="auto",this.connector.dataset.relationKey=`${this.startItem.name}-${o}`,this.connector.startX=t,this.connector.startY=s,this.connector.addEventListener("click",i=>{i.stopPropagation(),this.removeConnectorAndRelation(o)}),this.connectorsContainer.appendChild(this.connector)}updateConnectorPosition(e,n){if(!this.connector)return;const t=this.connector.startX,s=this.connector.startY,o=e-t,i=n-s,r=Math.atan2(i,o)*180/Math.PI;this.connector.style.width=`${Math.abs(o)}px`,this.connector.style.height="4px",this.connector.style.transform=`rotate(${r}deg)`,this.connector.style.transformOrigin="0% 50%",this.connector.style.left=`${t}px`,this.connector.style.top=`${s}px`}finalizeConnector(){const e=document.elementFromPoint(event.clientX,event.clientY);if(!e||!this.isItemInCategories(e)||e===this.startItem.element){this.connectorsContainer.removeChild(this.connector),this.connector=null,this.startItem=null;return}const n=this.startItem.name,t=e.dataset.name;Object.keys(this.relations).forEach(s=>{const o=this.relations[s];(o.start.name===n||o.target.name===n||o.start.name===t||o.target.name===t)&&this.removeConnectorAndRelation(o.connector.id)}),this.relations[this.connectorIdCounter]={connector:this.connector,start:this.startItem,target:this.categories.flatMap(s=>s.items).find(s=>s.element===e)},Object.keys(this.relations).forEach(s=>{const o=this.relations[s];o.target.name===t&&s!==this.connectorIdCounter.toString()&&this.removeConnectorAndRelation(o.connector.id)}),this.onChange&&this.onChange(this.relations),this.connector=null,this.startItem=null}removeConnectorAndRelation(e){const n=document.getElementById(e);if(n){n.parentElement.removeChild(n);for(const t in this.relations){const s=this.relations[t];if(s.connector&&s.connector.id===e){delete this.relations[t];break}}this.onChange&&this.onChange(this.relations)}}isItemInCategories(e){return this.categories.some(n=>n.items.some(t=>t.element===e))}validateConnections(){if(Object.keys(this.relations).length===0){console.log("Some connections are incorrect.");return}let e=!0;const n=new Set;for(const s in this.relations){const o=this.relations[s];if(!this.expectations.find(r=>{const a=r[0]===o.start.name&&r[1]===o.target.name||r[0]===o.target.name&&r[1]===o.start.name;return a&&n.add(r),a})){e=!1;break}}n.size!==this.expectations.length&&(e=!1);const t=new c;console.log(e?this.messages.onSuccess:this.messages.onFail),t.postToPg({event:e?"SUCCESS":"FAILURE",message:e?this.messages.onSuccess:this.messages.onFail,reasons:[],state:JSON.stringify({})})}}export{m as D,d as a};
